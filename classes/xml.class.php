<?php
###################################################################################
#
# XML Library, by Keith Devens, version 1.2b
# http://keithdevens.com/software/phpxml
#
# This code is Open Source, released under terms similar to the Artistic License.
# Read the license at http://keithdevens.com/software/license
#
###################################################################################

// wrapper for XML_serialize that automatically encases all data in an <ajaxforum> tag and adds a copyright
// AB 1/9/2006
function &make_xml(&$data)
{
	$xml_data = array(
		'ajaxforum' => array(
			'copyright' => 'XML generated by Ajax Forum v0.00001'
		)
	);
	$xml_data['ajaxforum'] = array_merge($xml_data['ajaxforum'], $data);

	return array2xml($xml_data);
}

###################################################################################
# XML_unserialize: takes raw XML as a parameter (a string)
# and returns an equivalent PHP data structure
###################################################################################
function & XML_unserialize(&$xml){
	$xml_parser = &new XML();
	$data = $xml_parser->parse($xml);
	$xml_parser->destruct();
	return $data;
}
###################################################################################
# XML_serialize: serializes any PHP data structure into XML
# Takes one parameter: the data to serialize. Must be an array.
###################################################################################
function &XML_serialize(&$data, $level = 0, $prior_key = NULL){
	if($level == 0){ ob_start(); echo '<?xml version="1.0" ?>',"\n"; }
	while(list($key, $value) = each($data))
		if(!strpos($key, ' attr')) #if it's not an attribute
			#we don't treat attributes by themselves, so for an empty element
			# that has attributes you still need to set the element to NULL

			if(is_array($value) and array_key_exists(0, $value)){
				XML_serialize($value, $level, $key);
			}else{
				$tag = $prior_key ? $prior_key : $key;
				echo str_repeat("\t", $level),'<',$tag;
				if(array_key_exists("$key attr", $data)){ #if there's an attribute for this element
					while(list($attr_name, $attr_value) = each($data["$key attr"]))
						echo ' ',$attr_name,'="',htmlspecialchars($attr_value),'"';
					reset($data["$key attr"]);
				}

				if(is_null($value)) echo " />\n";
				// added regular expression replace for ~%render_values%~
				// AB 1/9/2006
				elseif(!is_array($value)) echo '>',preg_replace("/~%(.*?)%~/", "\~\%\\1\%\~", htmlspecialchars($value)),"</$tag>\n";
				else echo ">\n",XML_serialize($value, $level+1),str_repeat("\t", $level),"</$tag>\n";
			}
	reset($data);
	if($level == 0){ $str = &ob_get_contents(); ob_end_clean(); return $str; }
}

function array2xml($data_arr, $indent = 0, $last_key = NULL)
{
	if($indent == 0)
	{
		ob_start(); 
		print '<?xml version="1.0" ?>' . "\n";
	}

	while(list($key, $value) = each($data_arr))
	{
		if(!strpos($key, ' attr'))
		{
			if(is_array($value) and array_key_exists(0, $value))
				array2xml($value, $indent, $key);
			else
			{
				$tag = $last_key ? $last_key : $key;
				
				print str_repeat("\t", $indent);
				print '<' . $tag;
				if(array_key_exists("$key attribute", $data_arr))
				{
					while(list($attr_name, $attr_value) = each($data["$key attribute"]))
					{
						print ' ';
						print $attr_name;
						print '="';
						print htmlspecialchars($attr_value);
						print '"';
					}
					reset($data["$key attribute"]);
				}

				if (is_null($value))
					print " />\n";
				elseif (!is_array($value))
				{
					print '>';
					print preg_replace("/~%(.*?)%~/", "\~\%\\1\%\~", htmlspecialchars($value));
					print "</$tag>\n";
				}
				else 
				{
					print ">\n";
					print array2xml($value, $indent+1);
					print str_repeat("\t", $indent);
					print "</$tag>\n";
				}
			}
		}
	}

	reset($data_arr);

	if($indent == 0)
		return ob_get_clean();
}



###################################################################################
# XML class: utility class to be used with PHP's XML handling functions
###################################################################################
class XML{
	var $parser;   #a reference to the XML parser
	var $document; #the entire XML structure built up so far
	var $parent;   #a pointer to the current parent - the parent will be an array
	var $stack;    #a stack of the most recent parent at each nesting level
	var $last_opened_tag; #keeps track of the last tag opened.

	function XML(){
 		$this->parser = xml_parser_create();
		xml_parser_set_option($this->parser, XML_OPTION_CASE_FOLDING, false);
		xml_set_object($this->parser, $this);
		xml_set_element_handler($this->parser, 'open','close');
		xml_set_character_data_handler($this->parser, 'data');
	}
	function destruct(){ xml_parser_free($this->parser); }
	function parse(&$data){
		$this->document = array();
		$this->stack    = array();
		$this->parent   = &$this->document;
		return xml_parse($this->parser, $data, true) ? $this->document : NULL;
	}
	function open(&$parser, $tag, $attributes){
		$this->data = ''; #stores temporary cdata
		$this->last_opened_tag = $tag;
		if(is_array($this->parent) and array_key_exists($tag,$this->parent)){ #if you've seen this tag before
			if(is_array($this->parent[$tag]) and array_key_exists(0,$this->parent[$tag])){ #if the keys are numeric
				#this is the third or later instance of $tag we've come across
				$key = count_numeric_items($this->parent[$tag]);
			}else{
				#this is the second instance of $tag that we've seen. shift around
				if(array_key_exists("$tag attr",$this->parent)){
					$arr = array('0 attr'=>&$this->parent["$tag attr"], &$this->parent[$tag]);
					unset($this->parent["$tag attr"]);
				}else{
					$arr = array(&$this->parent[$tag]);
				}
				$this->parent[$tag] = &$arr;
				$key = 1;
			}
			$this->parent = &$this->parent[$tag];
		}else{
			$key = $tag;
		}
		if($attributes) $this->parent["$key attr"] = $attributes;
		$this->parent  = &$this->parent[$key];
		$this->stack[] = &$this->parent;
	}
	function data(&$parser, $data){
		if($this->last_opened_tag != NULL) #you don't need to store whitespace in between tags
			$this->data .= $data;
	}
	function close(&$parser, $tag){
		if($this->last_opened_tag == $tag){
			$this->parent = $this->data;
			$this->last_opened_tag = NULL;
		}
		array_pop($this->stack);
		if($this->stack) $this->parent = &$this->stack[count($this->stack)-1];
	}
}
function count_numeric_items(&$array){
	return is_array($array) ? count(array_filter(array_keys($array), 'is_numeric')) : 0;
}



class CXML
{
	var $parser;
	var $parsed_data;

	var $temp_stack;

	function CXML()
	{
		$this->parsed_data = array();
		$this->temp_stack  = array();
	}

	function xml_in($xml)
	{
		$this->parser = xml_parser_create();
		xml_set_object($this->parser,$this);
		xml_set_element_handler($this->parser, 'start_element', 'end_element');
		xml_set_character_data_handler($this->parser, 'data_handler');

		if (!xml_parse($this->parser, $xml, 1))
		{
			die( sprintf( "XML error: %s at line %d", xml_error_string(xml_get_error_code($this->parser)), xml_get_current_line_number($this->parser) ) );
		}

		xml_parser_free($this->parser);

		return $this->parsed_data;
	}

	function start_element($parser, $name, $attribs){
		$name = strtolower($name);

		print "$name\n";

		$arr =& $this->get_current_element();
		array_push($this->temp_stack, $name);

		$arr[$name] = array();
	}

	function data_handler($parser, $data)
	{
		if ($data = trim($data)) {
		print "DATA: $data\n";
			end($this->temp_stack);
			$name = prev($this->temp_stack);
			$arr =& $this->get_current_element();

			//print $name."\n";<PRE></PRE>
			print_r($arr);
			//if (isset($arr[$name]))
			//	array_push($arr[$name], $data);
			//else
				$arr[$name] = $data;
		}
	}

	function end_element($parser, $name)
	{
		$name = strtolower($name);

		print "/$name\n";
		array_pop($this->temp_stack);
	}

	function &get_current_element()
	{
		$arr =& $this->parsed_data;

		for($i=0; $i<sizeof($this->temp_stack); $i++)
		{
			//if(!isset($this->temp_stack[$i]))
			//	break;

			$arr =& $arr[$this->temp_stack[$i]];

			//print "curr ";
			//print_r($arr);
			//print "/curr\n";
		}

		return $arr;
	}
}


